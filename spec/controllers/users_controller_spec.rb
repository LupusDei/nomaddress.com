require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {:first_name => "Test", :last_name => "User", :email => "user@user.user", :password => "password", :password_confirmation => "password"}
  end

  def ignore_login_required
    controller.stub!(:require_user).and_return(true)
  end

  describe "GET show" do

    it "will not authorize non-loggedin users to view their show page" do
      user = User.create! valid_attributes
      get :show, :id => user.id.to_s

      response.should redirect_to(login_path)
    end
    
    it "assigns the requested user as @user" do
      ignore_login_required
      user = User.create! valid_attributes
      get :show, :id => user.id.to_s
      response.should be_success
      assigns(:user).should eq(user)
    end
  end

  describe "GET new" do
    it "assigns a new user as @user" do
      ignore_login_required
      addr = Address.new
      Address.should_receive(:find).and_return(addr)
      get :new
      assigns(:user).should be_a_new(User)
    end
  end

  describe "GET edit" do
    it "assigns the requested user as @user" do
      ignore_login_required
      user = User.create! valid_attributes
      get :edit, :id => user.id.to_s
      assigns(:user).should eq(user)
    end
  end

  describe "POST create" do
    before do 
      @address = Address.new(:line1 => "blah", :zip => "12345", :city => "Blah", :state => "IL", :type => "Home")
      @address.should be_valid
      @address.save
    end

    describe "with valid params" do
      def post_valid_user
        post :create, :user => valid_attributes, :address => {"id" => @address.id}
      end

      it "creates a new User" do
        expect {
          post_valid_user
        }.to change(User, :count).by(1)
      end

      it "assigns a newly created user as @user" do
        post_valid_user
        assigns(:user).should be_a(User)
        assigns(:user).should be_persisted
      end

      it "redirects to the created user" do
        post_valid_user
        response.should redirect_to(User.last)
      end

      it "should login the created user" do
        post_valid_user
        user = User.last

        user.should be_logged_in
      end
    end

    describe "with invalid params" do
      def post_invalid_user
        post :create, :user => {}, :address => {"id" => @address.id}
      end

      it "assigns a newly created but unsaved user as @user" do
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        post_invalid_user
        assigns(:user).should be_a_new(User)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        post_invalid_user
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested user" do
        user = User.create! valid_attributes
        # Assuming there are no other users in the database, this
        # specifies that the User created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        User.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        ignore_login_required
        put :update, :id => user.id, :user => {'these' => 'params'}
      end

      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        ignore_login_required
        put :update, :id => user.id, :user => valid_attributes
        assigns(:user).should eq(user)
      end

      it "redirects to the user" do
        user = User.create! valid_attributes
        ignore_login_required
        put :update, :id => user.id, :user => valid_attributes
        response.should redirect_to(user)
      end
    end

    describe "with invalid params" do
      it "assigns the user as @user" do
        user = User.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        ignore_login_required
        put :update, :id => user.id.to_s, :user => {}
        assigns(:user).should eq(user)
      end

      it "re-renders the 'edit' template" do
        user = User.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        ignore_login_required
        put :update, :id => user.id.to_s, :user => {}
        response.should render_template("edit")
      end
    end
  end

end
